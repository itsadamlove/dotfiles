{
  "window.commandCenter": true,
  "editor.fontSize": 13,
  "editor.fontFamily": "'Monaspace Neon Var', 'Fira Code', Monaco, monospace",
  "editor.inlineSuggest.fontFamily": "'Monaspace Krypton', monospace",
  "editor.fontLigatures": "'calt', 'liga', 'ss01', 'cv01' 2, 'cv31' 1",
  "editor.cursorStyle": "block",
  "vim.cursorStylePerMode": {
    "normal": "block",
    "insert": "line",
    "visual": "block",
    "replace": "underline",
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "workbench.editor.enablePreview": true,
  "workbench.editor.enablePreviewFromQuickOpen": true,
  "workbench.editor.enablePreviewFromCodeNavigation": true,
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "vscode_custom_css.imports": [
    "file:///Users/adam/dotfiles/.vscode/style.css"
  ],
  "vim.commandLineModeKeyBindings": [],
  "vim.neovimUseConfigFile": true,
  "vim.enableNeovim": true,
  "vim.leader": "<space>",
  "vim.hlsearch": true,
  "vim.incsearch": true,
  "eslint.codeActionsOnSave.rules": null,
  "editor.formatOnSave": true,
  "notebook.formatOnSave.enabled": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": "always",
    "source.fixAll.eslint": "always",
    "source.fixAll.stylelint": "always"
  },
  "prettier.requireConfig": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "workbench.activityBar.orientation": "vertical",
  "vim.useSystemClipboard": true,
  "notvim.normalModeKeyBindings": [
    {
      "before": [
        "<leader>",
        "e"
      ],
      "commands": [
        {
          "command": "workbench.view.explorer",
          "when": "!sideBarVisible"
        },
      ]
    },
    {
      "before": [
        "<leader>",
        "r"
      ],
      "commands": [
        "workbench.files.action.showActiveFileInExplorer"
      ] // Reveal current file
    },
    {
      "before": [
        "|"
      ],
      "commands": [
        "workbench.action.splitEditor"
      ]
    },
    {
      "before": [
        "q"
      ], // Close current tab
      "after": [
        "<C-w>",
        "q"
      ]
    },
    {
      "before": [
        "Q"
      ], // Close current tab
      "commands": [
        "workbench.action.closeEditorsInGroup"
      ]
    },
    // {
    //     // This conflicts with commenting. So it depends which one we want first
    //     "before": [
    //         "<leader>",
    //         "c"
    //     ],
    //     "commands": [
    //         "workbench.action.closeActiveEditor"
    //     ]
    // },
    // Note: Multi-Cursor
    // For Multi-cursor, we can use the vim style `gb` or the VSCodde style `Cmd d`
    // Then, to `Shift + i` will move to the beginning of the selection and enter insert mode
    // Then, to `Shift + a` will move to the end of the selection and enter insert mode
    // `s` or `c` will delete the word and enter insert mode
    {
      // TODO: I don't quite know what this does yet.
      "before": [
        "<leader>",
        "f"
      ],
      "commands": [
        "workbench.action.findInFiles"
      ]
    },
    {
      // TODO: I don't quite know what this does yet.
      "before": [
        "<leader>",
        "s"
      ],
      "commands": [
        "workbench.action.showAllSymbols"
      ]
    },
    // This is for error mapping things. However, it's odd because the commands are simpler than I have in Vim.
    // In vim I have to hit leader a to even begin. Here, I can just do leader n for example
    // Lets see how my muscle memory goes.
    {
      "before": [
        "<leader>",
        "a",
        "n"
      ],
      "commands": [
        "editor.action.marker.next"
      ] // Jump to next error (like `:cnext`)
    },
    {
      "before": [
        "<leader>",
        "a",
        "p"
      ],
      "commands": [
        "editor.action.marker.prev"
      ] // Jump to previous error (like `:cprev`)
    },
    {
      "before": [
        "<leader>",
        "a",
        "q"
      ],
      "commands": [
        "workbench.actions.view.problems"
      ] // Open Problems Panel (like `:copen`)
    },
    {
      "before": [
        "<leader>",
        "a",
        "a"
      ],
      "commands": [
        "editor.action.quickFix"
      ] // Quick Fix (like `:CocFix`)
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    // {
    //   "before": [
    //     "<leader>",
    //     "/"
    //   ],
    //   "commands": [
    //     "editor.action.commentLine"
    //   ]
    // }
  ],
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "workbench.colorTheme": "Kanagawa",
  "editor.rulers": [
    120
  ],
  "terminal.integrated.profiles.osx": {
    "tmux-shell": {
      "path": "tmux",
      "args": [
        "new-session",
        "-A",
        "-s",
        "cursor:${workspaceFolder}"
      ]
    }
  },
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.fontLigatures": true,
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.fontFamily": "Monaspace Neon Var",
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.focusActiveEditorGroup"
  ],
  "terminal.external.osxExec": "iterm2.app",
  "colorize.decoration_type": "square-dot",
  "tailwindCSS.experimental.classRegex": [
    [
      "cva\\(((?:[^()]|\\([^()]*\\))*)\\)",
      "[\"'`]([^\"'`]*).*?[\"'`]"
    ],
    [
      "cx\\(((?:[^()]|\\([^()]*\\))*)\\)",
      "(?:'|\"|`)([^']*)(?:'|\"|`)"
    ]
  ]
}